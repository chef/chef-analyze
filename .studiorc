#!/bin/bash
#
# This is the place you can extend the funcitonality of the studio

hab pkg install chef/studio-common >/dev/null
source "$(hab pkg path chef/studio-common)/bin/studio-common"

# when updating these output files, update 'scripts/code_coverage.sh' as well
coverage_out="coverage/coverage.raw"
coverage_txt="coverage/coverage.txt"
coverage_html="coverage/coverage.html"

# switch all go commands to use the vendor/ directory
export GOFLAGS="-mod=vendor"

# Specify where to put 'go installed' binaries
export GOBIN=/src/bin

# Make 'go installed' binaries available in the PATH
export PATH="$GOBIN:$PATH"

document "build_cross_platform" <<DOC
  Build the $pkg_name binary for all supported platforms
DOC
function build_cross_platform() {
  install_if_missing core/go go
  install_if_missing core/gox gox
  ( cd /src || return 1
    gox -output="bin/{{.Dir}}_{{.OS}}_{{.Arch}}" \
        -os="darwin linux windows" \
        -arch="amd64 386"
  )
}

document "update_deps" <<DOC
  Install and/or update one or all Go dependencies

  By default, running only 'update_deps' will update all the Go
  dependencies to the latest available version.

  Example 1: Install a new Go dependency
  --------------------------------------
  update_deps github.com/go-delve/delve

  Example 2: Update a single dependency
  -------------------------------------
  update_deps github.com/chef/go-libs@master
DOC
function update_deps() {
  install_if_missing core/go go
  install_if_missing core/git git
  ( cd /src || return 1
    GOFLAGS="" go get -u "$@"
    go mod vendor
  )
}

document "gocode_generation" <<DOC
  Run 'go generate' for code generation
DOC
function gocode_generation() {
  install_if_missing core/go go
  ( cd /src || return 1
    go generate ./...
  )
}

document "unit_tests" <<DOC
  Run unit tests (go-based)
DOC
function unit_tests() {
  install_if_missing core/go go
  install_if_missing core/gcc gcc

  log_line "Running unit tests"
  # Avoid running integration tests inside unit tests
  ( cd /src || return 1
    mkdir -p coverage/
    GO_PACKAGES=$(go list ./... | grep -v integration)
    go test \
      -coverprofile=$coverage_out \
      -covermode=atomic $GO_PACKAGES || return 1
  )
}

document "code_coverage" <<DOC
  Verify the code coverage of this repository (unit tests based)
DOC
function code_coverage() {
  ( cd /src || return 1
    mkdir -p coverage/
    unit_tests || return 1
    log_line "Generating coverage profile information for each function ($(yellow /src/$coverage_txt))"
    go tool cover -func=$coverage_out -o  $coverage_txt
    cat $coverage_txt
    log_line "Generate HTML representation of coverage profile"
    go tool cover -html=$coverage_out -o $coverage_html
    log_line "HTML output written to '$(yellow /src/$coverage_html)' (open file with a web browser)"
  )
}

# run integraiton tests
function integration_tests() {
  install_if_missing core/go go
  install_if_missing core/gcc gcc

  log_line "Building cross-platform binaries"
  build_cross_platform || return 1

  log_line "Running integration tests (github.com/chef/chef-analyze/integration)"
  ( cd /src || return 1
    go test github.com/chef/chef-analyze/integration -v
  )
}

document "install_cookstyle" <<DOC
  Install cookstyle via rubygems
DOC
function install_cookstyle() {
  if cookstyle -h >/dev/null; then
    return 0
  fi
  log_line "Installing cookstyle via rubygems"
  hab pkg install -b core/ruby
  hab pkg install -b core/gcc
  gem install cookstyle
  RUBY_BIN="$(hab pkg path core/ruby)/bin"
  export PATH="$RUBY_BIN:$PATH"
}
